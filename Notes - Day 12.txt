Control Structures
1. Sequential control structure
2. Selective control structure
	if - statement
	Syntax:
		if <condition>: 
		     <statements>
		[else:
		     <statements>]

	elif - statement
		if <condition1>:
			<statements>
		elif <condition2>:
			<statements>	
		elif <condition3>:
			<statements>
		else:
			<statements>
	Nested if statement
		if <condition1>:
			if <condition2>:
				<statements>
			else:
				<statements>
		else:
			<statements>

	Week Day Number : 1-7
		1 - > "Its Monday.. Week day started"
		2-4 -> "Still week days only"
		5 -> Its Friday.. Get ready for week ends
		6,7 -> Enjoy your week ends....
		other than this: --> Invalid input

Ternary operator
	<expr> if <condition> else <expr>

example:
	num = 10
	print ("Even" if num % 2==0 else "Odd")
			

Fundamental datatypes are Immutable
	int, float, complex, bool, str

list - Sequence Data type
       collection of heterogenious data enclosed within []
       It preserves the insertion order
       it allows duplicates
       list element can be accessed using index
       List elements can be accessed using negative index (reverse index)
       It supports slicing & Repetation operator
	Slicing Syntax:
	[<startindex>:<endindex>:<stepindex>]
       Its Mutuable

    mylist = [1,2,3,6,7,"Testing"]

     del mylist[-3:] # delete last three elements from the list
    mylist.append(100) #append 100 in the list

tuple - Sequence Data type
      collection of heterogenious data enclosed within ()
       It preserves the insertion order
       it allows duplicates
       list element can be accessed using index
       It supports slicing & Repetation operator
       Its Immutuable

dict -> dictionary -> Mutable
	pairs of data
	key:value pair
Dlithe -> 9731455221
Arun Sir -> 9731455221
Method 1:
	mycontact = {} #empty dictionary
		or
	mycontact = dict() #empty dictionary
	mycontact["Arun"] = 9731455221
	mycontact["aasai"] = 123456
	mycontact[1] = "One"
Method 2:
	mycontacts = {"Arun" : 9731455221, "aasai":123456, 1:"One"}

	mycontacts.keys()
	mycontacts.values()

	del mycontacts["aasai"]

set - >
       collection of heterogenious data enclosed within {}
       does not preserve the insertion order
       does not allow duplicate data
       does not have index	
       Its mutuable

	myset = {1,2,3,5,6,7,3,9,3}
	print(myset)
		{1, 2, 3, 5, 6, 7, 9}
	myset.add(100)
	myset.remove(100)	

frozenset -> Immutable

	frozen = frozenset({1,2,3})

	list1 = [1,2,3,5,7,8,1,2,4]
	frozen2 = frozenset(list1)

bytes -> Immutable
	list1 = [1,2,3,5,7,8,1,2,4]
	byte1 = bytes(list1)
bytearray --> Mutable
	list1 = [1,2,3,5,7,8,1,2,4]
	byte1 = bytearray(list1)

range -> to store sequence of numbers --> Immutable
	fivemultiples = range(0,100, 5)
	print (*fivemultiples) --> * means unpacking

None	

3. Iterative control structure
	while
		while <condition>:
			<statements>
	for
		for <iter_variable> in <iterator>:
			<statements>
Prime numbers:
	All prime numbers are 6N+1 or 6N-1 except 2 and 3
	5	7	11	13	17	19	23
	1x6-1	1x6+1	2x6-1	2x6+1	3x6-1

	All 6N+1 or 6N-1 are not prime numbers

	Twin prime numbers

Pattern Programming
	Prasantha
	P
	Pr
	Pra
	Pras
	Prasa
	Prasan
	Prasant	
	Prasanth	
	Prasantha

list1 = [1,2,3,4,5,6,1,3,7,8,23,3,2]

uniquelist = [1,2,3,4,5,6,7,8,23]

	break - terminates the iteration
		while <condition>:
			<statements>
			break;
			<statements>
		<statements>
		
	continue - repeats the next iteration
		while <condition>:
			<statements>
			continue;
			<statements>
		<statements>

else statement with looping 

	for <iter_var> in <iterator>:
		<statements>
	else
		<statements>
Nested Loops
	while <condition>:
		while <condition>:
			<statements>

	for <iter_variable> in <iterator>:
		for <iter_variable> in <iterator>:
			<statements>
		<statements>

ASCII
	A-Z : 65 - 90
	a-z : 97-122

	for i in range(10):
	   for j in range(10):
	      print ("Ravindra is soo handsome")

Iterative algorithm
Recursive algorithm

Functions
	1. Built-in or Library or Pre-defined functions
	2. User Defined functions

String Functions & Methods
Functions
max()
min()
len()

Methods
capitalize()
center()
	string.center(width[, fillchar])
count()
	string.count(substring[, start=[..., end=...]])
endswith()
	str.endswith(suffix[, start[, end]])
find()
	str.find(sub[, start[, end]] )
format()
	template.format(p0, p1, ..., k0=v0, k1=v1, ...)
	name = "Samith"
	>>> age = 16
	>>> print ("He is {} and he is {} years old".format(name,age))
	He is Raghava and he is 16 years old

	print ("He is {0} and he is {1} years old".format(name,age))

	print ("He is {:20} and he is {:5} years old".format(name,age))

	print ("He is {name} and he is {age} years old".format(name="Kaushik",age=17))

	print ("Name : %s, age : %d, CGPA : %.1f"%(name, age, cgpa)) # String modulo
	formatting characters
	s - string
	d - decimal interger
	o - octal integer
	x, X - Hexadecimal integer
	b - binary integer
	f - float

index()
	str.index(sub[, start[, end]] )
isalnum()
isalpha()
isdigit()
islower()
isspace()
istitle()
isupper()
join()
	string.join(iterable)

ljust()
	string.ljust(width[, fillchar])
rjust()
	string.rjust(width[, fillchar])
lower()
upper()
maketrans()

maketrans() -- > Returns translation table to translate() method
	str = "This Is Python Example... "
	x = str.maketrans("abc de","123456")
	print(str.translate(x))

swapcase()
title()
zfill()

List Methods
Functions
	max()
	min()
	len()
	sum()
	any()
	all()

methods
	append()
	count()
	extend()
	index()
	insert()
	pop()
	remove()
	reverse()
	sort()
	clear()
	copy()

List Comprehension

<list_obj> = [<expr> for <iter_variable> in <iterator>]

list1 = [10,20,5,12,11]

list comprehension with if statement
<list_obj> = [<expr> for <iter_variable> in <iterator> if <condition> ]

list comprehension with if ... else ... statement
<list_obj> = [<expr>  if  <condition> else <expr> for <iter_variable> in <iterator> ]

